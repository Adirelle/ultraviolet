$LOAD_PATH.unshift "../lib"
require "uv"

EXAMPLE = <<-RUBY
module Uv
  def self..parse text, output = "xhtml", syntax_name = nil, line_numbers = false, render_style = "classic"
    init_syntaxes unless @syntaxes
    renderer = File.join( File.dirname(__FILE__), '..',"render", output,"\#{render_style}.render")
    css_class = render_style
    render_options = YAML.load( File.open(  renderer ) )
    if output == "xhtml"
       render_processor = HtmlProcessor.new( render_options, line_numbers )
       @syntaxes[syntax_name].parse( text,  render_processor )
       "<pre class =\"\#{css_class}\">\#{render_processor.string}</pre>"
    else
       raise( ArgumentError, "Output for \#{output} is not yet implemented" )
    end
  end
end
RUBY

GENERATED = "Do not modify, generated by generate.rb"

def write(file, content)
  File.open(file, "w"){|f| f.write content }
end

def render(text, language, theme)
  Uv.parse(text, "xhtml", language, true, theme)
end

# colorize examples for each language
html = File.read("source.html").gsub(/^-------+hl (.*?)-+$(.*?)^-------------------------+$/m) do
  language, theme = $1.split(",")
  render($2.strip, language, theme)
end

# render theme gallery
theme_css = Dir["../render/xhtml/files/css/*"]
write("theme-gallery.css", "/*#{GENERATED}*/\n\n" + theme_css.map{|file| File.read(file) }.join("\n\n"))

theme_gallery = theme_css.map do |file|
  theme_name = File.basename(file).sub(".css","")
  render(EXAMPLE, "ruby", theme_name)
end

html = html.sub("-----Themes-----", theme_gallery.join("\n\n\n\n"))

# write generated html
write("index.html", "<!-- #{GENERATED} -->\n\n" + html )
